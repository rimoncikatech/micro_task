name: CICD

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR for Service A
        id: build-image-service-a
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: service-a
        run: |
          cd service-a
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR for Service B
        id: build-image-service-b
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: service-b
        run: |
          cd service-b
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition for Service A
        id: task-def-service-a
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: micro-cluster-task-gain.json
          container-name: service-a
          image: ${{ steps.build-image-service-a.outputs.image }}

      - name: Fill in the new image ID in the Amazon ECS task definition for Service B
        id: task-def-service-b
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: micro-cluster-task-gain-service-b.json
          container-name: service-b
          image: ${{ steps.build-image-service-b.outputs.image }}

      - name: Deploy Amazon ECS task definition for Service A
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-service-a.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_A }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deploy Amazon ECS task definition for Service B
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-service-b.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_B }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
